apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-client-es
  namespace: default
  labels:
    cluster: test
    nodeGroup: client
    elasticsearch.k8s.webcenter.fr: "true"
  annotations:
    elasticsearch.k8s.webcenter.fr: "true"
spec:
  podManagementPolicy: Parallel
  replicas: 2
  selector:
    matchLabels:
      cluster: test
      nodeGroup: client
      elasticsearch.k8s.webcenter.fr: "true"
  serviceName: test-client-headless-es
  template:
    metadata:
      labels:
        cluster: test
        nodeGroup: client
        elasticsearch.k8s.webcenter.fr: "true"
      annotations:
        elasticsearch.k8s.webcenter.fr: "true"
        elasticsearch.k8s.webcenter.fr/configmap-test-client-config-es: 2b7974f44eca1429b868c651dcd5921bbe87655a250b780c55a0a6538cb5e56a
        elasticsearch.k8s.webcenter.fr/secret-elasticsearch-security: 2c1eef3af7f9998f3e29ccd7a2927fdf62ca82080ea74b67e9454aae3c2adc98
      name: test-client-es
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                cluster: test
                nodeGroup: client
                elasticsearch.k8s.webcenter.fr: "true"
            topologyKey: rack
      containers:
      - env:
        - name: network.publish_host
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: node.attr.node_name
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: node.name
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: node.roles
          value: ingest
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test-credential-es
              key: elastic
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: ELASTICSEARCH_JAVA_OPTS
          value: -Xms2g -Xmx2g
        - name: cluster.name
          value: test
        - name: network.host
          value: 0.0.0.0
        - name: PROBE_WAIT_STATUS
          value: green
        - name: PROBE_SCHEME
          value: https
        envFrom:
        - configMapRef:
            name: test-bootstrapping-es
        image: docker.elastic.co/elasticsearch/elasticsearch:2.3.0
        livenessProbe:
          failureThreshold: 3
          periodSeconds: 30
          successThreshold: 1
          tcpSocket:
            port: 9300
          timeoutSeconds: 5
        name: elasticsearch
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
              - /bin/bash
              - -c
              - |
                  #!/usr/bin/env bash
                  set -euo pipefail

                  # Implementation based on Elasticsearch helm template

                  export NSS_SDB_USE_CACHE=no

                  STARTER_FILE=/tmp/.es_starter_file
                  if [ -f ${STARTER_FILE} ]; then
                    HTTP_CODE=$(curl --output /dev/null -k -XGET -s -w '%{http_code}' -u elastic:${ELASTIC_PASSWORD} ${PROBE_SCHEME}://127.0.0.1:9200/)
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "Failed to get Elasticsearch API"
                      exit ${RC}
                    fi
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    else
                      echo "Elasticsearch API return code ${HTTP_CODE}"
                      exit 1
                    fi
                  else
                    HTTP_CODE=$(curl --output /dev/null -k -XGET -s -w '%{http_code}' -u elastic:${ELASTIC_PASSWORD} --fail ${PROBE_SCHEME}://127.0.0.1:9200/_cluster/health?wait_for_status=${PROBE_WAIT_STATUS}&timeout=1s)
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "Failed to get Elasticsearch API"
                      exit ${RC}
                    fi
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      touch ${STARTER_FILE}
                      exit 0
                    else
                      echo "Elasticsearch API return code ${HTTP_CODE}"
                      exit 1
                    fi
                  fi
        resources:
          limits:
            cpu: "4"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 2Gi
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 9200
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /mnt/snapshot
          name: snapshot
        - mountPath: /usr/share/elasticsearch/data
          name: elasticsearch-data
        - mountPath: /usr/share/elasticsearch/config
          name: config
        - mountPath: /usr/share/elasticsearch/plugins
          name: plugin
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: docker.elastic.co/elasticsearch/elasticsearch:2.3.0
        name: configure-sysctl
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          privileged: true
          runAsUser: 0
      - command:
        - /bin/bash
        - -c
        - |
            #!/usr/bin/env bash
            set -euo pipefail

            elasticsearch-keystore create
            for i in /mnt/keystoreSecrets/*; do
                key=$(basename $i)
                echo "Adding file $i to keystore key $key"
                elasticsearch-keystore add-file "$key" "$i"
            done

            # Add the bootstrap password since otherwise the Elasticsearch entrypoint tries to do this on startup
            if [ ! -z ${ELASTIC_PASSWORD+x} ]; then
              echo 'Adding env $ELASTIC_PASSWORD to keystore as key bootstrap.password'
              echo "$ELASTIC_PASSWORD" | elasticsearch-keystore add -x bootstrap.password
            fi

            cp -a /usr/share/elasticsearch/config/elasticsearch.keystore /mnt/keystore/
        image: docker.elastic.co/elasticsearch/elasticsearch:2.3.0
        name: init-keystore
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
          - name: keystore
            mountPath: /mnt/keystore
          - name: elasticsearch-keystore
            mountPath: /mnt/keystoreSecrets
      - command:
        - /bin/bash
        - -c
        - |
            #!/usr/bin/env bash
            set -euo pipefail
            
            # Move original config
            echo "Move original elasticsearch configs"
            cp -a /usr/share/elasticsearch/config/* /mnt/config/

            # Move configmaps
            if [ -d /mnt/configmap ]; then
              echo "Move custom configs"
              cp -f /mnt/configmap/* /mnt/config/
            fi

            # Move certificates
            echo "Move cerficates"
            mkdir -p /mnt/config/api-cert /mnt/config/transport-cert
            cp /mnt/certs/api/* /mnt/config/api-cert/
            cp /mnt/certs/node/ca.crt /mnt/config/transport-cert/
            cp /mnt/certs/node/${POD_NAME}.crt /mnt/config/transport-cert/
            cp /mnt/certs/node/${POD_NAME}.key /mnt/config/transport-cert/

            # Move keystore
            if [ -f /mnt/keystore/elasticsearch.keystore ]; then
              echo "Move keystore"
              cp /mnt/keystore/elasticsearch.keystore /mnt/config
            fi

            # Set right
            echo "Set right"
            chown -R elasticsearch:elasticsearch /mnt/config
            chown -v elasticsearch:elasticsearch /mnt/data

            ./bin/elasticsearch-plugin install -b repository-s3

            if [ -d /mnt/plugins ]; then
              cp -a /usr/share/elasticsearch/plugins/* /mnt/plugins/
              chown -R elasticsearch:elasticsearch /mnt/plugins
            fi

        image: docker.elastic.co/elasticsearch/elasticsearch:2.3.0
        name: init-filesystem
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
          - name: config
            mountPath: /mnt/config
          - name: node-tls
            mountPath: /mnt/certs/node
          - name: api-tls
            mountPath: /mnt/certs/api
          - name: elasticsearch-config
            mountPath: /mnt/configmap/elasticsearch.yml
            subPath: elasticsearch.yml
          - name: elasticsearch-config
            mountPath: /mnt/configmap/log4j.yaml
            subPath: log4j.yaml
          - name: elasticsearch-data
            mountPath: /mnt/data
          - name: plugin
            mountPath: /mnt/plugins
          - name: keystore
            mountPath: /mnt/keystore
        securityContext:
          runAsUser: 0
        resources:
          limits:
            cpu: 300m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 120
      volumes:
      - name: node-tls
        secret:
          secretName: test-tls-transport-es
      - name: api-tls
        secret:
          secretName: test-tls-api-es
      - configMap:
          name: test-client-config-es
        name: elasticsearch-config
      - name: snapshot
        nfs:
          path: /snapshot
          server: nfsserver
      - name: keystore
        emptyDir: {}
      - name: elasticsearch-keystore
        secret:
          secretName: elasticsearch-security
      - name: config
        emptyDir: {}
      - name: plugin
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      name: elasticsearch-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: local-path