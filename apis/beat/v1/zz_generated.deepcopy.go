//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	"github.com/webcenter-fr/elasticsearch-operator/apis/shared"
	corev1 "k8s.io/api/core/v1"
	policyv1 "k8s.io/api/policy/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Filebeat) DeepCopyInto(out *Filebeat) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Filebeat.
func (in *Filebeat) DeepCopy() *Filebeat {
	if in == nil {
		return nil
	}
	out := new(Filebeat)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Filebeat) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatAntiAffinitySpec) DeepCopyInto(out *FilebeatAntiAffinitySpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatAntiAffinitySpec.
func (in *FilebeatAntiAffinitySpec) DeepCopy() *FilebeatAntiAffinitySpec {
	if in == nil {
		return nil
	}
	out := new(FilebeatAntiAffinitySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatDeploymentSpec) DeepCopyInto(out *FilebeatDeploymentSpec) {
	*out = *in
	if in.AntiAffinity != nil {
		in, out := &in.AntiAffinity, &out.AntiAffinity
		*out = new(FilebeatAntiAffinitySpec)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(corev1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]corev1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]corev1.EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnvFrom != nil {
		in, out := &in.EnvFrom, &out.EnvFrom
		*out = make([]corev1.EnvFromSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PodTemplate != nil {
		in, out := &in.PodTemplate, &out.PodTemplate
		*out = new(corev1.PodTemplateSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.PodDisruptionBudgetSpec != nil {
		in, out := &in.PodDisruptionBudgetSpec, &out.PodDisruptionBudgetSpec
		*out = new(policyv1.PodDisruptionBudgetSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.InitContainerResources != nil {
		in, out := &in.InitContainerResources, &out.InitContainerResources
		*out = new(corev1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.AdditionalVolumes != nil {
		in, out := &in.AdditionalVolumes, &out.AdditionalVolumes
		*out = make([]FilebeatVolumeSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Persistence != nil {
		in, out := &in.Persistence, &out.Persistence
		*out = new(FilebeatPersistenceSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]corev1.ContainerPort, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatDeploymentSpec.
func (in *FilebeatDeploymentSpec) DeepCopy() *FilebeatDeploymentSpec {
	if in == nil {
		return nil
	}
	out := new(FilebeatDeploymentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatIngress) DeepCopyInto(out *FilebeatIngress) {
	*out = *in
	in.Spec.DeepCopyInto(&out.Spec)
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatIngress.
func (in *FilebeatIngress) DeepCopy() *FilebeatIngress {
	if in == nil {
		return nil
	}
	out := new(FilebeatIngress)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatList) DeepCopyInto(out *FilebeatList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Filebeat, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatList.
func (in *FilebeatList) DeepCopy() *FilebeatList {
	if in == nil {
		return nil
	}
	out := new(FilebeatList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FilebeatList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatLogstashExternalRef) DeepCopyInto(out *FilebeatLogstashExternalRef) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatLogstashExternalRef.
func (in *FilebeatLogstashExternalRef) DeepCopy() *FilebeatLogstashExternalRef {
	if in == nil {
		return nil
	}
	out := new(FilebeatLogstashExternalRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatLogstashManagedRef) DeepCopyInto(out *FilebeatLogstashManagedRef) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatLogstashManagedRef.
func (in *FilebeatLogstashManagedRef) DeepCopy() *FilebeatLogstashManagedRef {
	if in == nil {
		return nil
	}
	out := new(FilebeatLogstashManagedRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatLogstashRef) DeepCopyInto(out *FilebeatLogstashRef) {
	*out = *in
	if in.ManagedLogstashRef != nil {
		in, out := &in.ManagedLogstashRef, &out.ManagedLogstashRef
		*out = new(FilebeatLogstashManagedRef)
		**out = **in
	}
	if in.ExternalLogstashRef != nil {
		in, out := &in.ExternalLogstashRef, &out.ExternalLogstashRef
		*out = new(FilebeatLogstashExternalRef)
		(*in).DeepCopyInto(*out)
	}
	if in.LogstashCaSecretRef != nil {
		in, out := &in.LogstashCaSecretRef, &out.LogstashCaSecretRef
		*out = new(corev1.LocalObjectReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatLogstashRef.
func (in *FilebeatLogstashRef) DeepCopy() *FilebeatLogstashRef {
	if in == nil {
		return nil
	}
	out := new(FilebeatLogstashRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatMonitoringSpec) DeepCopyInto(out *FilebeatMonitoringSpec) {
	*out = *in
	if in.Prometheus != nil {
		in, out := &in.Prometheus, &out.Prometheus
		*out = new(FilebeatPrometheusSpec)
		**out = **in
	}
	if in.Metricbeat != nil {
		in, out := &in.Metricbeat, &out.Metricbeat
		*out = new(shared.MetricbeatMonitoringSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatMonitoringSpec.
func (in *FilebeatMonitoringSpec) DeepCopy() *FilebeatMonitoringSpec {
	if in == nil {
		return nil
	}
	out := new(FilebeatMonitoringSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatPersistenceSpec) DeepCopyInto(out *FilebeatPersistenceSpec) {
	*out = *in
	if in.VolumeClaimSpec != nil {
		in, out := &in.VolumeClaimSpec, &out.VolumeClaimSpec
		*out = new(corev1.PersistentVolumeClaimSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Volume != nil {
		in, out := &in.Volume, &out.Volume
		*out = new(corev1.VolumeSource)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatPersistenceSpec.
func (in *FilebeatPersistenceSpec) DeepCopy() *FilebeatPersistenceSpec {
	if in == nil {
		return nil
	}
	out := new(FilebeatPersistenceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatPrometheusSpec) DeepCopyInto(out *FilebeatPrometheusSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatPrometheusSpec.
func (in *FilebeatPrometheusSpec) DeepCopy() *FilebeatPrometheusSpec {
	if in == nil {
		return nil
	}
	out := new(FilebeatPrometheusSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatService) DeepCopyInto(out *FilebeatService) {
	*out = *in
	in.Spec.DeepCopyInto(&out.Spec)
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatService.
func (in *FilebeatService) DeepCopy() *FilebeatService {
	if in == nil {
		return nil
	}
	out := new(FilebeatService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatSpec) DeepCopyInto(out *FilebeatSpec) {
	*out = *in
	in.ImageSpec.DeepCopyInto(&out.ImageSpec)
	in.ElasticsearchRef.DeepCopyInto(&out.ElasticsearchRef)
	in.LogstashRef.DeepCopyInto(&out.LogstashRef)
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Module != nil {
		in, out := &in.Module, &out.Module
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	in.Deployment.DeepCopyInto(&out.Deployment)
	in.Monitoring.DeepCopyInto(&out.Monitoring)
	if in.Ingresses != nil {
		in, out := &in.Ingresses, &out.Ingresses
		*out = make([]FilebeatIngress, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]FilebeatService, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatSpec.
func (in *FilebeatSpec) DeepCopy() *FilebeatSpec {
	if in == nil {
		return nil
	}
	out := new(FilebeatSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatStatus) DeepCopyInto(out *FilebeatStatus) {
	*out = *in
	if in.IsError != nil {
		in, out := &in.IsError, &out.IsError
		*out = new(bool)
		**out = **in
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatStatus.
func (in *FilebeatStatus) DeepCopy() *FilebeatStatus {
	if in == nil {
		return nil
	}
	out := new(FilebeatStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FilebeatVolumeSpec) DeepCopyInto(out *FilebeatVolumeSpec) {
	*out = *in
	in.VolumeMount.DeepCopyInto(&out.VolumeMount)
	in.VolumeSource.DeepCopyInto(&out.VolumeSource)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FilebeatVolumeSpec.
func (in *FilebeatVolumeSpec) DeepCopy() *FilebeatVolumeSpec {
	if in == nil {
		return nil
	}
	out := new(FilebeatVolumeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Metricbeat) DeepCopyInto(out *Metricbeat) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Metricbeat.
func (in *Metricbeat) DeepCopy() *Metricbeat {
	if in == nil {
		return nil
	}
	out := new(Metricbeat)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Metricbeat) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricbeatAntiAffinitySpec) DeepCopyInto(out *MetricbeatAntiAffinitySpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricbeatAntiAffinitySpec.
func (in *MetricbeatAntiAffinitySpec) DeepCopy() *MetricbeatAntiAffinitySpec {
	if in == nil {
		return nil
	}
	out := new(MetricbeatAntiAffinitySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricbeatDeploymentSpec) DeepCopyInto(out *MetricbeatDeploymentSpec) {
	*out = *in
	if in.AntiAffinity != nil {
		in, out := &in.AntiAffinity, &out.AntiAffinity
		*out = new(MetricbeatAntiAffinitySpec)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(corev1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]corev1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]corev1.EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnvFrom != nil {
		in, out := &in.EnvFrom, &out.EnvFrom
		*out = make([]corev1.EnvFromSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PodTemplate != nil {
		in, out := &in.PodTemplate, &out.PodTemplate
		*out = new(corev1.PodTemplateSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.PodDisruptionBudgetSpec != nil {
		in, out := &in.PodDisruptionBudgetSpec, &out.PodDisruptionBudgetSpec
		*out = new(policyv1.PodDisruptionBudgetSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.InitContainerResources != nil {
		in, out := &in.InitContainerResources, &out.InitContainerResources
		*out = new(corev1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.AdditionalVolumes != nil {
		in, out := &in.AdditionalVolumes, &out.AdditionalVolumes
		*out = make([]MetricbeatVolumeSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Persistence != nil {
		in, out := &in.Persistence, &out.Persistence
		*out = new(MetricbeatPersistenceSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricbeatDeploymentSpec.
func (in *MetricbeatDeploymentSpec) DeepCopy() *MetricbeatDeploymentSpec {
	if in == nil {
		return nil
	}
	out := new(MetricbeatDeploymentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricbeatList) DeepCopyInto(out *MetricbeatList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Metricbeat, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricbeatList.
func (in *MetricbeatList) DeepCopy() *MetricbeatList {
	if in == nil {
		return nil
	}
	out := new(MetricbeatList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MetricbeatList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricbeatPersistenceSpec) DeepCopyInto(out *MetricbeatPersistenceSpec) {
	*out = *in
	if in.VolumeClaimSpec != nil {
		in, out := &in.VolumeClaimSpec, &out.VolumeClaimSpec
		*out = new(corev1.PersistentVolumeClaimSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Volume != nil {
		in, out := &in.Volume, &out.Volume
		*out = new(corev1.VolumeSource)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricbeatPersistenceSpec.
func (in *MetricbeatPersistenceSpec) DeepCopy() *MetricbeatPersistenceSpec {
	if in == nil {
		return nil
	}
	out := new(MetricbeatPersistenceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricbeatSpec) DeepCopyInto(out *MetricbeatSpec) {
	*out = *in
	in.ImageSpec.DeepCopyInto(&out.ImageSpec)
	in.ElasticsearchRef.DeepCopyInto(&out.ElasticsearchRef)
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Module != nil {
		in, out := &in.Module, &out.Module
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	in.Deployment.DeepCopyInto(&out.Deployment)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricbeatSpec.
func (in *MetricbeatSpec) DeepCopy() *MetricbeatSpec {
	if in == nil {
		return nil
	}
	out := new(MetricbeatSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricbeatStatus) DeepCopyInto(out *MetricbeatStatus) {
	*out = *in
	if in.IsError != nil {
		in, out := &in.IsError, &out.IsError
		*out = new(bool)
		**out = **in
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricbeatStatus.
func (in *MetricbeatStatus) DeepCopy() *MetricbeatStatus {
	if in == nil {
		return nil
	}
	out := new(MetricbeatStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricbeatVolumeSpec) DeepCopyInto(out *MetricbeatVolumeSpec) {
	*out = *in
	in.VolumeMount.DeepCopyInto(&out.VolumeMount)
	in.VolumeSource.DeepCopyInto(&out.VolumeSource)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricbeatVolumeSpec.
func (in *MetricbeatVolumeSpec) DeepCopy() *MetricbeatVolumeSpec {
	if in == nil {
		return nil
	}
	out := new(MetricbeatVolumeSpec)
	in.DeepCopyInto(out)
	return out
}
